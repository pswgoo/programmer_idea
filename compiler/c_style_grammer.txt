Prog ->  Prog1 Prog | epsilon
Prog1 -> Stmt1 | Type Prog2
Prog2 -> id Prog3 | & id Array
Prog3 -> Decl2; | FuncDef1

Stmt -> Decl; | Stmt1
Stmt1 -> Expr; | ConstDef; | return Expr; | return;
	 -> {Stmts}
	 -> for (Def; Expr ; Expr) LoopStmt
	 -> for (Expr; Expr ; Expr) LoopStmt
	 -> if (Expr) Stmt
	 -> if (Expr) Stmt else Stmt
	 -> while (Expr) LoopStmt
	 -> switch (Expr) { Case }

Stmts -> Stmt Stmts | epsilon

StmtWithBreak -> break; | Stmt | {StmtWithBreaks}
StmtWithBreaks -> StmtWithBreak StmtWithBreaks | epsilon

LoopStmt -> continue; | StmtWithBreak | {LoopStmts}
LoopStmts -> LoopStmt LoopStmts | epsilon

Case -> case ConstInt : StmtWithBreak Case1 | case ConstInt : StmtWithBreak Case1 default: StmtWithBreak

Case1 -> case ConstInt : StmtWithBreak Case1 | epsilon
Type -> bool | char | int | float | double

ConstDef -> const Type id = ConstValue
ConstValue -> boolean | ch | integer | real | str | null
ConstInt -> integer | id

Decl -> Type Decl1
Decl1 -> id Decl2 | & id Array
Decl2 -> [] Array | Array
Array -> [ConstInt] Array | epsilon

IdValue -> id IdValue1
IdValue1 -> [Expr] IdValue1 | epsilon

Def -> Decl = Expr | Decl = InitList
InitList -> {Args} | str

FuncDef -> Type id FuncDef1 | void id FuncDef1
FuncDef1 -> (Param) { Stmts }
Param -> Decl Param1
Param1 -> ,Decl Param1 | epsilon

Func -> id(Args)
Args -> Expr ArgList | epsilon
ArgList -> ,Expr ArgList | epsilon

Expr -> Expr1 ExprR
ExprR -> = Expr1 ExprR | += Expr1 ExprR | -= Expr1 ExprR | *= Expr1 ExprR | /= Expr1 ExprR | %= Expr1 ExprR | epsilon

Expr1 -> Expr2 Expr1R
Expr1R -> || Expr2 Expr1R | epsilon

Expr2 -> Expr3 Expr2R
Expr2R -> && Expr3 Expr2R | epsilon

Expr3 -> Expr4 Expr3R
Expr3R -> '|' Expr3 Expr3R  | epsilon

Expr4 -> Expr5 Expr4R
Expr4R -> ^ Expr5 Expr4R | epsilon

Expr5 -> Expr6 Expr5R
Expr5R -> & Expr6 Expr5R | epsilon

Expr6 -> Expr7 Expr6R
Expr6R -> == Expr7 Expr6R | != Expr7 Expr6R | epsilon

Expr7 -> Expr8 Expr7R
Expr7R -> < Expr8 Expr7R | > Expr8 Expr7R | <= Expr8 Expr7R | >= Expr8 Expr7R  | epsilon

Expr8 -> Expr9 Expr8R
Expr8R -> + Expr9 Expr8R | - Expr9 Expr8R | epsilon

Expr9 -> Expr10 Expr9R
Expr9R -> * Expr10 Expr9R | / Expr10 Expr9R | % Expr10 Expr9R | epsilon

Expr10 -> ++Expr11 | --Expr11 | !Expr11 | +Expr11 | -Expr11 | ~Expr11 | Expr11

Expr11 -> Func Expr11R | IdValue Expr11R | (Type)Expr Expr11R | (Expr) Expr11R | ConstValue
Expr11R -> ++ | -- | epsilon
